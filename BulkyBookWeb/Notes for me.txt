Right click on project to go to 'edit project file'
Check out 'launchSettings.json' in 'properties' folder - It will show which port it will run on when run by solution name or iisexpress name
'wwwroot' folder only contains static files, like css and js. C# files will not go there.
We will add all the connection strings and sql keys of application in 'appsettings.json' you can add other app settings file under this file.
'Program.cs' file is responsible for running the application. We will do dependency injection here. We configure http request pipeline too. Where we have and can add middleware from browser to server.
Order of middleware in pipeline is very important. Eg, Authentication middleware (app.UseAuthentication) should always come before Authorisation middleware(app.Authorization).
Model: Represents the shape of the data. It is written in C#.
View: Represents the User Interface. It interacts with models using controllers.
Controller: Handles the user request and acts as an interface between Model and View. It is the heart of your application. Request 1st comes to the controller
Program.cs contains default route if controller or action is not given.
Every controller file has a view associated with it in 'Views' folder.
IActionResult has multiple return types.
Shared Folder is used for partial views, It is a view that we can call within a view. _Layout is a default masterpage in all views. _ValidationScriptsPartial is for adding validations and can be called on any page.
If you add a namespace in '_ViewImports ', it will be accessible everywhere. addTagHelper helps you use ~html tag helpers in html codes.
Default page is defined in _ViewStart file.
Tag Helper replaces HTML helper and makes it easier to write.

VS 22 hot reload if ticked, will reload the webpage on every save, so we do not need to go to the page and reload manually. Else you have to add NuGet PAckage named runtimecompilation for the same then add it in program.cs as builder.Services.AddRazorPAges().AddRazorRuntimeCompilation();
Entity Framework is a smart editor that helps us with data operations, stored procedures are not needed.
for every database in table, a model is required.
In a model for db, if you want to make a variable the primary key, use [Key] above Id variable. for that using DataAnnotations is added on top. Same is with [Required] property.

appsettings.json keeps the secrets so add connection string there.
In entity framework, there are migrations that push the changes to Database. To do that, go to Tools -> Nuget PM -> PM Console.
Add a migration, which will track all the db changes that are needed, and once migration is created, we will push to DB to actually create a DB.
In console, PM> add-migration AddCategoryToDatabase	(missing package for add-migration; need EC Core Tools package)
New folder will be created with 2 files and name 'Migrations'
When migration is looking good, say PM> update-database. It will create the db with settings in migration. check ssms for that db.
2 tables can be seen, one of which keeps track of which migration to be updated, as all migrations are not needed to be updated everytime. entity framework does that.
To open a db, right click and select top 1000 rows

Run program on IISExpress to stop opening cmd everytime. Make sure to open VS through admin account to do this change.
Rule to keep NameController.cs to understand that it is a controller.

Go in SSMS and edit cateogries table by clicking edit top 200 and adding 1 dummy record.

Add a bootswatch.com theme for in your wwwroot css folder. Remove '.btn-primary' and '.a' (if present) code to use from bootswatch.

Need to add exception to create button in create form